			+--------------------+
			|        CS 2042     |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- PRELIMINARIES ----

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff. If you fail to do so while your
>> soltion contains such material you will be penalized.

-- refered to slides on
https://oslab.kaist.ac.kr/pintosslides/

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1. -- in thread.h ----------------
 int64_t tick_wakeup; 

 //Added a struct member for thread struct which indicate when to wakeup (set when putting the thread to blocked state) 

2. -- in thread.c ----------------
 static struct list sleep_list;

 // Defined a static list to store the sleeping threads.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep method call thread_sleep method to put the current thread to sleep for
specific amount of ticks. Then, the thread is set to THREAD_BLOCKED state instead of
yeilding the CPU (how it is previously implemented). So, this prevent busy waiting.

timer_interrupt is a function which is responsible of incrementing the tick counter.
Each time the timer_interrupt called thread_awake method is set to be called.
thread_awake looks for threads in sleep_list and wake up the threads whose tick_wakeup
are expired.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

thread_awake is only function which is implemented by me to be called inside timer_interrupt. 
For minimize the time spent in timer interrupt handler, I maintained the sleep_list as ordered list 
(ascending order of tick_wakeup).
If a thread found with tick_wakeup greater than current tick (i.e. wakeup_tick not expired) immediately 
break the loop instead of checking for all threads.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

In critical sections OS should run in INTR_OFF condition.(i.e. interrupts are disabled).
But, timer_sleep() can be called only in INTR_ON condition. So, race conditions are
avoided.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Interrupts are disabled in the critical section of timer_sleep() 
(i.e. critical condition is in thread_sleep() method called by timer_sleep()). 
So, occuring interrupts are avoided in a critical section. So, race conditions are avoided

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Maintain a minimum overhead in thread_awake() ( by keeping the sleep_list in ascending order) 
with less complexity.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1. -- in thread.h -> thread struct-----
int original_priority;     /* To store original priority of the thread */
struct list donations;     /*to store the priority donated threads */
struct list_elem d_elem;   /* donated list element */
struct lock *waiting_lock; /*lock which is waiting for */

d_elem, is needed when storing threads in donations.



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

Used lib/kernel/list.h implemented linked list for store the priority donated 
threads.

Didn't implement nested donations. ( not required in lab )

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Always added threads to lists while maintaining the priority order (highest proiority first)
Used `list_insert_ordered` function for that purpose.

Sorted the list and the got the first element.
In some instances sorting is need.
ex: in sema_up() method

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

Check wether the lock is already acquired by another thread. (i.e. by checking the locks semaphore value)
If not, let the thread to simply down the semaphore.
Else, inserted the acquiring thread to lock holder's donations list. Then let it to down the semaphore.(so, it will get blocked)
Priority donation happens when the acquiring thread's priority > holder's priority.( Inside the sema_down method)
Stored the lock's address in the `waiting_lock` member which is try to acquire.

Didn't implement nested donations. ( not required in lab )

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

Remove all the threads which are waited on releasing lock from the holder's donation list.
If donation list is empty set thread's priority to it's `original_priority`.
if not assign the highest priority of the thread which is `donations` list. (if greater than the original priority)

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

While thread is about to assign a new priority
another thread can interrupt it (even if it is less than new priority to assign).
So, it's a race condition to prevent.

Didn't come across such situations. (Used a testcase driven approach to complete the lab).
So, didn't handle such situation. (Didn't had much time)

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Used a testcase driven approach. Tried to keep a minimum overheads while passing the testcases.
(keeping threads in lists in sorted order for maintain a minimum overhead. It is better than iterating through 
a list all time and sorting if needed)

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts. You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Tasks are challenging and it took too long to me to complete (complete 3 days!).

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes. It helped me to understand concepts very clearly. 

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
